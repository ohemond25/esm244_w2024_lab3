---
title: "ESM 244 Lab 3 Part 1: Working with spatial data"
author: "Olivia Hemond"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(broom)

### spatial packages
library(sf)
library(tmap)
```

## Read in our data

```{r}
ca_counties_raw_sf <- read_sf(here('data/ca_counties/CA_Counties_TIGER2016.shp')) 
# all associated files (.dbf, .prj, .shx, etc) have to be in the same folder with the same name as the .shp
# sf = simple features

# can treat sf files as normal dataframe for data manipulation
ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>% 
  mutate(land_km2 = aland / 1e6) %>%  # converting from m2 to km2
  select(county = name, land_km2)
# sf format keeps geometry column with your data

# if we wanted to remove geometry column:
ca_counties_df <- ca_counties_sf %>% 
  as.data.frame() %>% 
  select(-geometry)
```

## Check the CRS

```{r}
ca_counties_sf %>% st_crs() # st = spatiotemporal
ca_counties_sf %>% terra::crs() # same info, using terra package (rasters) instead of sf (vectors)
```

## Explore visually

```{r}
# one way: basic plot
plot(ca_counties_sf %>% select(land_km2)) # plots all your variables unless you select specifically
```

```{r}
# another way: use ggplot
ggplot() +
  geom_sf(data  = ca_counties_sf, aes(fill = land_km2), color = 'white', size = 0.1) + # don't need to specify x and y, geom_sf uses our geometry column to plot instead
  theme_void() + # get rid of all axis info and background grid
  scale_fill_gradientn(colors = c('cyan', 'blue', 'purple')) # create a gradient out of these colors
```

## Read in some sesbania records

```{r}
sesbania_sf <- read_sf(here('data', 'red_sesbania', 'ds80_for_lab.gpkg')) %>% 
  janitor::clean_names()
# .gpkg (geopackage) bundles all your files together
# our geometry now says 'POINT' instead of previous 'MULTIPOLYGON'

# check crs
sesbania_sf %>% st_crs() # crs is different from our ca counties!

plot(sesbania_sf %>% select(id))
```

## The analysis:

Let's find the count of red sesbania observed locations in this dataset, by county, and then create a map of all CA counties using the fill color to indicate sesbania counts

### Pseudocode:

put data into the same coordinate reference system merge/overlay/intersect/join the two datasets so for each point we know which county its in group by county and summarize counts of points per county ggplot, set fill color to counts

## Transform the CRS so records match counties

```{r}
sesbania_3857_sf <- st_transform(sesbania_sf, 3857) # takes original object, then tell it which EPSG code to transform to

# if we didn't know EPSG code:
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf)) # just tell it the other object you want to compare to

st_crs(sesbania_3857_sf) == st_crs(ca_counties_sf)
```

## Let's plot the two together!

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = 'red') +
  theme_void()
```

## Spatial join!

```{r}
### order of join matters

ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf) # keeps multipolygon geometry. for each county, matches it to observations

# try reversing:
sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf) # keeps point geometry. for each observation, matches it to what county
```

## Summarize by county

Choropleth (aka regular map)

```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county) %>% 
  summarize(n_records = sum(!is.na(id))) # need to drop counties with no observations (NA)

ggplot() +
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = 'grey90', size = 1) +
  scale_fill_gradientn(colors = c('lightgrey', 'orange', 'red')) +
  theme_minimal() +
  labs(fill = "Number of S. punicea records")
```

## Next analysis:

For the county with the greatest number of red sesbania records, make a map of those locations and where they occur within the county.

### Pseudocode:

find county with maximum records spatial join, keep point geometry (sesb_ca_sf) filter by that county plot just the county with the points overlaid

```{r}
county_max <- sesb_counts_sf %>% 
  filter(n_records == max(n_records)) %>% 
  pull(county) # just take one column value out

solano_sesb_sf <- sesb_ca_sf %>% 
  filter(county %in% county_max) # would have to use %in% if there were more than one max value. can use here to be safe

solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = 'red')
```

# Making an interacive map with tmap

```{r}
#| eval: false
#| include: true

### set the viewing mode to interactive
tmap_mode(mode = 'view')

tm_shape(ca_counties_sf) +
  tm_fill('land_km2', palette = 'BuGn') +
  tm_shape(sesbania_sf) +
  tm_dots()
```
